{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","Filter","handleFilterChange","filter","value","onChange","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Persons","filteredList","setPersons","persons","setSuccessMessage","map","person","name","number","onClick","window","confirm","personService","copyPersons","splice","indexOf","setTimeout","deletePersonFromList","Notification","message","className","Error","App","useState","setNewName","setNewNumber","setFilter","successMessage","error","setError","useEffect","allPersons","length","toLowerCase","includes","event","target","preventDefault","personObject","some","copyPersonId","find","p","catch","alreadyDeleted","returnedPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.007513b0.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n//const baseUrl = 'http://localhost:3001/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => {\n    return response.data\n  })\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n  axios.delete(`${baseUrl}/${id}`)\n}\n\nconst replaceNumber = (newObject, id) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => {\n    return response.data\n  })\n}\n\n// eslint-disable-next-line\nexport default { getAll, create, deletePerson, replaceNumber }","import React, { useState, useEffect } from 'react'\nimport personService from \"./services/persons\"\nimport './index.css'\n\nconst Filter = ({ handleFilterChange, filter }) => {\n  return (\n    <div>\n      filter shown with <input value={filter} onChange={handleFilterChange} />\n    </div>\n  )\n}\n\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>name: <input value={newName} onChange={handleNameChange} /></div>\n      <div>number: <input value={newNumber} onChange={handleNumberChange} /></div>\n      <div><button type=\"submit\">add</button></div>\n    </form>\n  )\n}\n\nconst Persons = ({ filteredList, setPersons, persons, setSuccessMessage }) => {\n\n  const deletePersonFromList = (person) => {\n    if (window.confirm(`Delete ${person.name}`)) {\n      personService.deletePerson(person.id)\n      const copyPersons = [...persons]\n      copyPersons.splice(copyPersons.indexOf(person), 1)\n      setPersons(copyPersons)\n      setSuccessMessage(\n        `Deleted ${person.name}`\n      )\n      setTimeout(() => {\n        setSuccessMessage(null)\n      }, 3000)\n    }\n  }\n\n  return (\n    <>\n      {filteredList.map(person =>\n        <p key={person.id}>{person.name} {person.number} <button onClick={() => deletePersonFromList(person)}>delete</button></p>\n      )}\n    </>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"success\">\n      {message}\n    </div>\n  )\n}\n\nconst Error = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [successMessage, setSuccessMessage] = useState(null)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(allPersons => setPersons(allPersons))\n  }, [])\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    if (persons.some(person => person.name === newName)) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one`)) {\n\n        const copyPersonId = persons.find(p => p.name === newName).id\n\n        personService\n          .replaceNumber(personObject, copyPersonId)\n          .then(response => {\n            setPersons(persons.map(person => person.name === newName ? response : person))\n            setSuccessMessage(\n              `Changed ${personObject.name}'s number`\n            )\n            setTimeout(() => {\n              setSuccessMessage(null)\n            }, 3000)\n          })\n          .catch(error => {\n            setError(\n              `Information of ${personObject.name} has already been removed from server`\n            )\n            setTimeout(() => {\n              setError(null)\n            }, 3000)\n            const copyPersons = [...persons]\n            const alreadyDeleted = persons.find(person => person.name === newName)\n            copyPersons.splice(copyPersons.indexOf(alreadyDeleted), 1)\n            setPersons(copyPersons)\n          })\n\n      }\n    } else {\n\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setSuccessMessage(\n            `Added ${personObject.name}`\n          )\n          setTimeout(() => {\n            setSuccessMessage(null)\n          }, 3000)\n        })\n        .catch(error => {\n          setError(\n            error.response.data.error\n          )\n          setTimeout(() => {\n            setError(null)\n          }, 3000)\n        })\n    }\n    \n    setNewName('')\n    setNewNumber('')\n    setFilter('')\n  }\n\n  const handleNameChange = (event) => setNewName(event.target.value)\n\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n\n  const handleFilterChange = (event) => setFilter(event.target.value)\n\n  const filteredList = filter.length > 0\n    ? persons.filter(person => person.name.toLowerCase().includes(filter))\n    : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={successMessage} />\n      <Error message={error} />\n      <Filter\n        handleFilterChange={handleFilterChange}\n        filter={filter}\n      />\n      <h2>add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        filteredList={filteredList}\n        setPersons={setPersons}\n        persons={persons}\n        setSuccessMessage={setSuccessMessage}\n      />\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n)"],"sourceRoot":""}